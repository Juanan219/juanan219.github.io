<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>MySQL on JuananBlog</title>
    <link>https://juanan219.github.io/tags/mysql/</link>
    <description>Recent content in MySQL on JuananBlog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-NC 4.0&lt;/a&gt;</copyright>
    <lastBuildDate>Thu, 10 Jun 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://juanan219.github.io/tags/mysql/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Practica de Auditoria de Bases de Datos</title>
      <link>https://juanan219.github.io/posts/2021/06/practica-de-auditoria-de-bases-de-datos/</link>
      <pubDate>Thu, 10 Jun 2021 00:00:00 +0000</pubDate>
      
      <guid>https://juanan219.github.io/posts/2021/06/practica-de-auditoria-de-bases-de-datos/</guid>
      <description>Activa desde SQLPlus la auditoría de los intentos de acceso fallidos al sistema. Comprueba su funcionamiento.  Oracle, por defecto, tiene las auditorías activadas, así que configuraremos que registre los accesos no válidos ejecutamos la siguiente instrucción
SQL&amp;gt; audit create session whenever not successful; Auditoria terminada correctamente. Realizamos la prueba primero saliendo de la sesión del usuario system y accediendo con una cuenta con la contraseña incorrecta
SQL&amp;gt; disconnect SQL&amp;gt; connect c##juanan1/prueba ERROR: ORA-01017: nombre de usuario/contrase?</description>
    </item>
    
    <item>
      <title>Creando escenarios multicontenedor con docker-compose</title>
      <link>https://juanan219.github.io/posts/2021/02/creando-escenarios-multicontenedor-con-docker-compose/</link>
      <pubDate>Tue, 23 Feb 2021 00:00:00 +0000</pubDate>
      
      <guid>https://juanan219.github.io/posts/2021/02/creando-escenarios-multicontenedor-con-docker-compose/</guid>
      <description>En ocasiones, es necesario disponer de múltiples contenedores, como por ejemplo:
  Cuando necesitamos varios servicios para que la aplicación funcione, como por ejemplo con Wordpress, necesitaríamos un contenedor para la propia aplicación web y otro contenedor para el servidor de bases de datos MySQL.
  Si tenemos nuestra aplicación construida con microservicios, de los cuales, cada microservicio se ejecutará en un contenedor independiente.
  Cuando trabajamos en escenarios en los que necesitamos varios contenedores, podemos usar docker-compose para gestionarlos.</description>
    </item>
    
    <item>
      <title>Redes en Docker</title>
      <link>https://juanan219.github.io/posts/2021/02/redes-en-docker/</link>
      <pubDate>Tue, 23 Feb 2021 00:00:00 +0000</pubDate>
      
      <guid>https://juanan219.github.io/posts/2021/02/redes-en-docker/</guid>
      <description>Introducción a las redes en Docker Cada vez que creamos un contenedor en Docker, éste se conecta a una red virtual y docker hace una configuración del sistema (usando interfaces puente e iptables para que la máquina tenga una ip interna, tenga acceso al exterior, podamos mapear puertos (DNAT), etc&amp;hellip;)
Podemos ver el comando ip si ejecutamos un contenedor con este comando.
docker run -it --rm --name docker_debian debian bash -c &#39;ip a&#39; 1: lo: &amp;lt;LOOPBACK,UP,LOWER_UP&amp;gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000 link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00 inet 127.</description>
    </item>
    
  </channel>
</rss>
